getwd()
csv.read
csv.read()
load('predictor.R')
source("predictor.R")
source("predictor.R")
help read.csv
help
help("read.csv")
source("predictor.R")
source("predictor.R")
objects()
source("predictor.R")
source("predictor.R")
objects()
data
head(data)
cont
source("predictor.R")
head(data$1)
head(data[1])
class(data[1])
head(data[1,1])
class(data[1,1])
class(data[1,3])
class(data[1,1])
cont
source("predictor.R")
class(data[1,3])
class(data[1,1])
which(data[1] == "1980-01-01")
which(data[1] == "1980-01-03")
?sub
?regexp
which(sub(data[1],  "1980-01-03"))
?which
"1980" %in% data[1]
"1980" %in% data[1,]
pmatch("1980", data[1])
data[1]
?table
class(data[1])
class(as.table(data[1]))
lapply(data[1], grep)
which(data[1]>= "1980-01-01")
which(data[1]>= "1980-01-01" && data[1] <="1980-13-31")
which(data[1]>= "1980-01-01" && data[1] <="1980-12-31")
which(data[1]>= "1980-01-01" & data[1] <="1980-12-31")
data[,(1, 2)]
data[,c(1, 2)]
cont
load('predictor.R')
load('predictor.R')
source("predictor.R")
class(date)
formate(date, "%m-%d")
format(date, "%m-%d")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
?printf
printf("asdf")
printf("asdf")
source("predictor.R")
source("predictor.R")
itoa
as.string
as.char
print(4)
source("predictor.R")
nrow
ncol(data)
source("predictor.R")
2^5
source("predictor.R")
traceback
traceback()
source("predictor.R")
traceback()
source("predictor.R")
traceback()
ncol(data)
1:ncol(data)
traceback()
source("predictor.R")
source("predictor.R")
        for(locationId in 2:ncol(data)){
            oldData = getOldData(data, date, locationId, curYear)
            predictedValues[day, locationId] <- combiningFn(oldData);
        }
        for(locationId in 2:ncol(data)){
            oldData = getOldData(data, date, locationId, curYear)
oldData
cont
source("predictor.R")
cont
source("predictor.R")
cont
source("predictor.R")
for(locationId in 2:ncol(data)){
print (1)}
source("predictor.R")
traceback()
trace()
source("predictor.R")
traceback()
source("predictor.R")
traceback()
source("predictor.R")
source("predictor.R")
source("predictor.R")
traceback()
as.number
as.Number
as.Integer
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
cont
source("predictor.R")
curYear
locationId
date
data[oldDates, locationId]
data[oldDates, 1]
    dayMatchFn <- function(potentialDateStr, dateToMatch = date, curYearTmp = curYear){
        potentialDate = as.Date(potentialDateStr,format="%Y-%m-%d");
        (format(potentialDate, "%m-%d") == monthDayStr) 
    }
    oldDates = sapply(data[1], dayMatchFn)
sum(oldDates)
    dayMatchFn <- function(potentialDateStr, dateToMatch = date, curYearTmp = curYear){
        potentialDate = as.Date(potentialDateStr,format="%Y-%m-%d");
        (format(potentialDate, "%m-%d") == monthDayStr) & (format(potentialDate, "%Y") <= curYearTmp)
    }
    oldDates = sapply(data[1], dayMatchFn)
    oldData <- data[oldDates, locationId]
sum(oldDates)
curYear
cont
source("predictor.R")
source("predictor.R")
source("predictor.R")
oldData
cont
?cont
cont
quit
Q
source("predictor.R")
source("predictor.R")
source("predictor.R")
as.character(asdf)
as.character(23)
?copy
source("predictor.R")
source("predictor.R")
c(1, 2)^2
source("predictor.R")
source("predictor.R")
source("predictor.R")
?mean
source("predictor.R")
source("predictor.R")
traceback()
A <- array(c(1,2,3,4), 2, 2)
A
A <- array(c(1,2,3,4), c(2, 2))
A
mean(A, 1)
mean(A,)
mean(A)
?mean
?sum
?csum
?colsum
colsum
csum
colsum(A)
class(A)
colsums(A)
help.search("colsum)
help.search("colsum")
Matrix::colSums(A)
Matrix::colMeans(A)
source("predictor.R")
traceback()
source("predictor.R")
traceback()
source("predictor.R")
source("predictor.R")
A[1, 1:2] = c(1, 3)
A
source("predictor.R")
source("predictor.R")
predictedValues[day, locationIds] <- values
dim(values)
values
length(values)
predictedValues
?data.frame
class(oldData)
    predictedValues = data.frame(matrix(nrow = 365, ncol = ncol(data) - 1));
predictedValues[day, locationIds] <- values
locationIds
predictedValues[day, locationIds] <- unlist(values);
values
unlist(values)
unlist(values)
predictedValues[day, locationIds] <- values[1:500];
B = data.frame(A)
B
B[1, 1:2] = c(2, 3)
B
B[1, 1:2] = A[1:2]
B
v = A[1, 1:2]
class(v)

predictedValues[day, locationIds] <- values[1, 1:500];
source("predictor.R")
predictedValues[day, locationIds] <- values[1,];
predictedValues[day, locationIds] <- values[1,1:500];
class(values)
v = repeat(0, 500)
v = rep(0, 500)
v
v[1, locationIds] <- values
v[locationIds] <- values
v
A
B
B = A
B(1,locationIds) = values
B(1, locationIds)
B = A
B
B(1, locationIds)
B[1, locationIds]=values
day
predictedValues[day, locationIds] <- values
predictedValues[day, locationIds]
day
locationIds
A
A[3:4] = A
A[,3:4] = A
predictedValues[day, 2] <- values;
predictedValues[day, 2:501] <- values;
predictedValues[2:501] <- values;
predictedValues
predictedValues[, locationIds] = values
predictedValues
predictedValues
A
B = as.array(A)
B
A[3, 4] = B
A[c(3, 4)] = B
B
A
A[c(3, 4)] = B
A[,c(3, 4)] = B
A[,c(3, 4)] = B
source("predictor.R")
source("predictor.R")
    predictedValues = data.frame(matrix(nrow = 365, ncol = ncol(data) - 1));
traceback()
source("predictor.R")
traceback()
source("predictor.R")
traceback()
numLocations = ncol(predictedValues)
numLocations
predictedValues
error <- errorChecker(predictedValues = predictedValuesMean)
error <- errorChecker(predictedValues = predictedValuesMean)
error <- errorChecker(predictedValues = predictedValuesMean)
error <- errorChecker(predictedValues = predictedValuesMean)
predictedValues
source("predictor.R")
source("predictor.R")
length(A)
length(A)
source("predictor.R")
traceback()
error <- errorChecker(predictedValues = predictedValuesMean)
traceback()
predictedValues
source("predictor.R")
traceback()
source("predictor.R")
values
source("predictor.R")
predictedValues[day, locationIds] <- values;
predictedValues
Q
source("predictor.R")
predictedValues
predictedValues[1, ]
predictedValuesMean[1, ]
predictedValuesMean[2, ]
numLocations = ncol(predictedValues)-1
predictedValues = predictedValuesMean
numLocations = ncol(predictedValues)-1
numLocations
actualValues= data[(data[1]>=predictedValues[1, 1]) & (data[1]<=tail(predictedValues[1], 1)), 2:(numLocations + 1)]
[(data[1]>=predictedValues[1, 1]) & (data[1]<=tail(predictedValues[1], 1))
(data[1]>=predictedValues[1, 1]) & (data[1]<=tail(predictedValues[1], 1))
data
data = csvData
(data[1]>=predictedValues[1, 1]) & (data[1]<=tail(predictedValues[1], 1))
    startDate = predictedValues[1, 1];
    endDate = tail(predictedValues[1], 1);
startDate
endDate
endDate = predictedValues[1, nrow(predictedValues)];
endDate
predictedValues
endDate = predictedValues[1, nrow(predictedValues)];
endDate
 nrow(predictedValues)
error <- errorChecker(predictedValues = predictedValuesMean)
print(error)
    numLocations = ncol(predictedValues)-1
    startDate = predictedValues[1, 1];
    endDate = predictedValues[nrow(predictedValues), 1];
    
    actualValues= data[(data[1]>=startDate) & (data[1]<=endDate), 2:(numLocations + 1)];
    predictedValues = predictedValues[, 2:numLocations + 1]
    print(c(actualValues, predictedValues))
    ((actualValues - predictedValues)^2 )/length(actualValues)
((actualValues - predictedValues)^2 )/length(actualValues)
sum((actualValues - predictedValues)^2 )/length(actualValues)
print(c(actualValues, predictedValues))
predictedValues
actualValues
    actualValues= data[(data[1]>=startDate) & (data[1]<=endDate), 2:(numLocations + 1)];
actualValues
B = array(c(actualValues[1], predictedValues[1]), c(365, 2)]
B = array(c(actualValues[1], predictedValues[1]), c(365, 2))
B
predictedValues
actualValues
    locationsSelector = 2:ncol(predictedValues);
    startDate = predictedValues[1, 1];
    endDate = predictedValues[nrow(predictedValues), 1];
    
    actualValues= data[(data[1]>=startDate) & (data[1]<=endDate), locationsSelector];
    predictedValues = predictedValues[, locationsSelector]
locationsSelector = 2:ncol(predictedValues);
predictedValues = predictedValuesMean
    locationsSelector = 2:ncol(predictedValues);
    startDate = predictedValues[1, 1];
    endDate = predictedValues[nrow(predictedValues), 1];
    
    actualValues= data[(data[1]>=startDate) & (data[1]<=endDate), locationsSelector];
    predictedValues = predictedValues[, locationsSelector]
actualValues predictedValues
cbind(actualValues, predictedValues)
((actualValues - predictedValues)^2 )/length(actualValues)
sum((actualValues - predictedValues)^2 )/length(actualValues)
C = actualValues - predictedValues
C
C = C^2
C
mean(C)
    sqError = (actualValues - predictedValues)^2;
    mean(sqError)
predictedValuesBest <- predictedValuesMean
outputFileName = 'predictions.csv';
write.csv(predictedValuesBest, outputFileName, quote = FALSE, row.names = FALSE, col.names = FALSE);
?write.csv
    print(cbind(actualValues, predictedValues))
source("predictor.R")
source("predictor.R")
?Matrix::colMeans
1/c(1, 2)
reverse(1/c(1, 2))
reverse(1/2:-1:1)
1/2:1
1/2:-1:1
seq(2, -1, 1)
?seq
seq(2, 1, -1)

a = c(2, 3)
c*A
c%*%A
source("predictor.R")
source("predictor.R")
source("predictor.R")
?return
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
X
t(weightsFn(X))
Q
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
source("predictor.R")
quit()
